# example locally deploying built application but also has deployer
# example build deployer as part of docker compose https://github.com/zhao-lin-li/docker-compose-build/tree/master
version: "3.2"

# using fixed ip addresses so opennms provisoning config works
# to see all network use docker network ls
# to see config use docker network inspect spring-boot-leaflet-starter_jettynw
# note gateway is 172.20.1.1 
networks:
  jettynw:
    ipam:
      config:
        - subnet: 172.20.1.0/24


volumes:
  data-jetty-files: {}
  data-jetty-logs: {}
  data-postgres: {}
  data-opennms: {}
  data-opennms-cfg: {}

services:

    # rest simulator app runs on http://localhost:8080/
    # cargo deployer runs on http://localhost:8080/cargo-jetty-deployer/
    # see https://codehaus-cargo.github.io/cargo/Jetty+Remote+Deployer.html
    # also https://www.baeldung.com/deploy-to-jetty
    
    restsimulator :
        container_name: restsimulator
        hostname: restsimulator
        build: .
        ports: 
         - "8080:8080"
         - "11099:11099"
         - "11022:22"
        volumes:
          # setting up log data storage (target is used in log4j2.xml)
          - data-jetty-logs:/var/lib/jetty/target:rw
          # setting up data files storage
          - data-jetty-files:/data-jetty-files:rw
          # setting up
          # - ./container-fs/jetty/start.d/start.ini:/var/lib/jetty/start.d/start.ini
          # setting up properties for restsimulator app
          - ./container-fs/jetty/start.d/restsimulator.ini:/var/lib/jetty/start.d/restsimulator.ini
          # deploying built restsimulator war file directly into application
          - ./target/spring-boot-leaflet-starter-0.0.1-SNAPSHOT.war:/var/lib/jetty/webapps/root.war
          # setting up properties for JMX monitoring
          - ./container-fs/jetty/start.d/jmx-remote.ini:/var/lib/jetty/start.d/jmx-remote.ini
          
        #command: [ "java",    "-Dcom.sun.management.jmxremote",    "-Dcom.sun.management.jmxremote.ssl=false",    "-Dcom.sun.management.jmxremote.authenticate=false",     "-Dcom.sun.management.jmxremote.port=1099",    "-jar","$JETTY_HOME/start.jar"]
        # ,"etc/jetty-jmx.xml","etc/jetty.xml"
        
    #    "./wait-for-it.sh", "my-svc-dbserver:3306", "--", "sh", "-c", "java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar /app.jar"]
    #    environment:
     #     JAVA_OPTIONS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.port=11099 -Dcom.sun.management.jmxremote.local.only=false"
        networks:
           jettynw:
             ipv4_address: 172.20.1.50
             
    nginx:
       image: nginx:1.23-alpine
       container_name: nginx
       hostname: nginx
       restart: unless-stopped
       volumes:
         - ./container-fs/nginx/conf.d:/etc/nginx/conf.d
         - ./container-fs/nginx/certs:/etc/ssl/certs
         - ./container-fs/nginx/private:/etc/ssl/private
       ports:
         - "80:80"
         - "443:443"
       networks:
           jettynw:
             ipv4_address: 172.20.1.5

    # opennms services
    database:
        image: ${DOCKER_REGISTRY:-docker.io}/postgres:${POSTGRES_VERSION:-15}
        container_name: database
        hostname: database
        environment:
          TZ: ${TIMEZONE:-America/New_York}
          POSTGRES_HOST: database
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        volumes:
          - data-postgres:/var/lib/postgresql/data
        command: ["postgres", "-N", "200"]
        healthcheck:
          test: [ "CMD-SHELL", "pg_isready -U postgres" ]
          interval: 10s
          timeout: 30s
          retries: 3
        networks:
          jettynw:
             ipv4_address: 172.20.1.10

    horizon:
        image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${HORIZON_OCI:-horizon}:${ONMS_VERSION:-bleeding}
        container_name: horizon
        hostname: horizon
        sysctls:
          net.ipv4.ping_group_range: "0 429496729"
        depends_on:
          - database
        environment:
          TZ: ${TIMEZONE:-America/New_York}
        volumes:
          - data-opennms:/opennms-data
          - data-opennms-cfg:/opt/opennms/etc
          - ./container-fs/horizon/opt/opennms/deploy:/opt/opennms/deploy
          - ./container-fs/horizon/opt/opennms-overlay:/opt/opennms-overlay
          - ./container-fs/horizon/etc/conf.d/confd.toml:/etc/confd/confd.toml
        command: ["-s"]
        ports:
          - "8101:8101/tcp"
          - "8980:8980/tcp"
          - "10162:1162/udp"
        healthcheck:
          test: [ "CMD", "curl", "-f", "-I", "http://localhost:8980/opennms/login.jsp" ]
          interval: 1m
          timeout: 5s
          retries: 3
        networks:
          jettynw:
             ipv4_address: 172.20.1.15

    # optional - jmx config generator
    jmx-client :
        container_name: jmx-client
        hostname: jmx-client
        build: ./jmx-client
        networks:
           jettynw:
             ipv4_address: 172.20.1.51
        

